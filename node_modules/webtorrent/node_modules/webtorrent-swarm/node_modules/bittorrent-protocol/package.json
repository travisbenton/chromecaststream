{
  "name": "bittorrent-protocol",
  "description": "Simple, robust, BitTorrent peer wire protocol implementation",
  "version": "1.4.2",
  "author": {
    "name": "Feross Aboukhadijeh",
    "email": "feross@feross.org",
    "url": "http://feross.org/"
  },
  "bugs": {
    "url": "https://github.com/feross/bittorrent-protocol/issues"
  },
  "dependencies": {
    "bencode": "^0.6.0",
    "bitfield": "^1.0.1",
    "debug": "^2.0.0",
    "extend.js": "^0.0.1",
    "inherits": "^2.0.1",
    "speedometer": "^0.1.2"
  },
  "devDependencies": {
    "tape": "^2.12.3"
  },
  "homepage": "http://webtorrent.io",
  "keywords": [
    "torrent",
    "bittorrent",
    "protocol",
    "stream",
    "peer",
    "wire",
    "p2p",
    "peer-to-peer"
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/feross/bittorrent-protocol.git"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/9..latest",
      "chrome/25..latest",
      "firefox/20..latest",
      "safari/6..latest",
      "opera/15.0..latest"
    ]
  },
  "readme": "# bittorrent-protocol [![build](https://img.shields.io/travis/feross/bittorrent-protocol.svg)](https://travis-ci.org/feross/bittorrent-protocol) [![npm](https://img.shields.io/npm/v/bittorrent-protocol.svg)](https://npmjs.org/package/bittorrent-protocol) [![gittip](https://img.shields.io/gittip/feross.svg)](https://www.gittip.com/feross/)\n\n### Simple, robust, BitTorrent wire protocol implementation\n\n[![browser support](https://ci.testling.com/feross/bittorrent-protocol.png)](https://ci.testling.com/feross/bittorrent-protocol)\n\nNode.js implementation of the [BitTorrent peer wire protocol](https://wiki.theory.org/BitTorrentSpecification#Peer_wire_protocol_.28TCP.29).\nThe protocol is the main communication layer for BitTorrent file transfer.\n\nAlso works in the browser with [browserify](http://browserify.org/)! This module is used\nby [WebTorrent](http://webtorrent.io).\n\n## install\n\n```\nnpm install bittorrent-protocol\n```\n\n## usage\n\nThe protocol is implemented as a **duplex stream**, so all you have to do is pipe to and\nfrom it.\n\nduplex streams | a.pipe(b).pipe(a)\n---- | ---\n![duplex streams](https://raw.github.com/substack/lxjs-stream-examples/master/images/duplex_streams.png) | ![a.pipe(b).pipe(a)](https://raw.github.com/substack/lxjs-stream-examples/master/images/a_pipe_b_pipe_a.png)\n\n(Images from the [\"harnessing streams\"](https://github.com/substack/lxjs-stream-examples/blob/master/slides.markdown) talk by substack.)\n\n```js\nvar Protocol = require('bittorrent-protocol')\nvar net = require('net')\n\nnet.createServer(function (socket) {\n\tvar wire = new Protocol()\n\n\t// pipe to and from the protocol\n\tsocket.pipe(wire).pipe(socket)\n\n\twire.on('handshake', function (infoHash, peerId) {\n\t\t// lets emit a handshake of our own as well\n\t\twire.handshake(new Buffer('my info hash'), new Buffer('my peer id'))\n\t})\n\n\twire.on('unchoke', function () {\n\t\tconsole.log('peer is no longer choking us: ' + wire.peerChoking)\n\t})\n}).listen(6881)\n```\n\n## methods\n\n### handshaking\n\nSend and receive a handshake from the peer. This is the first message.\n\n```js\n// send a handshake to the peer\nwire.handshake(infoHash, peerId, { dht: true })\nwire.on('handshake', function (infoHash, peerId, extensions) {\n\t// receive a handshake\n  console.log(extensions.dht) // supports DHT (BEP-0005)\n  console.log(extensions.extended) // supports extension protocol (BEP-0010)\n})\n```\n\nBoth the `infoHash` and the `peerId` should be 20 bytes (`Buffer` or hex-encoded `string`).\n\n### choking\n\nCheck if you or the peer is choking.\n\n```js\nwire.peerChoking // is the peer choking us?\nwire.amChoking // are we choking the peer?\n\nwire.on('choke', function () {\n\t// the peer is now choking us\n})\nwire.on('unchoke', function () {\n\t// peer is no longer choking us\n})\n```\n\n### interested\n\nSee if you or the peer is interested.\n\n```js\nwire.peerInterested // is the peer interested in us?\nwire.amInterested // are we interested in the peer?\n\nwire.on('interested', function () {\n\t// peer is now interested\n})\nwire.on('uninterested', function () {\n\t// peer is no longer interested\n})\n```\n\n### bitfield\n\nExchange piece information with the peer.\n\n```js\n// send a bitfield to the peer\nwire.bitfield(buffer)\nwire.on('bitfield', function (bitfield) {\n\t// bitfield received from the peer\n})\n\n// send a have message indicating that you have a piece\nwire.have(pieceIndex)\nwire.on('have', function (pieceIndex) {\n\t// peer has sent you a have message\n})\n```\n\nYou can always see which pieces the peer has\n\n```js\nwire.peerPieces.get(i) // returns true if peer has piece i\n```\n\n`wire.peerPieces` is a `BitField`, see [docs](https://www.npmjs.org/package/bitfield).\n\n### requests\n\nSend and respond to requests for pieces.\n\n```js\n// request a block from a peer\nwire.request(pieceIndex, offset, length, function (err, block) {\n\tif (err) {\n\t\t// there was an error (peer has started choking us etc)\n\t\treturn\n\t}\n\t// got block\n})\n\n// cancel a request to a peer\nwire.cancel(pieceIndex, offset, length)\n\n// receive a request from a peer\nwire.on('request', function (pieceIndex, offset, length, callback) {\n\t// ... read block ...\n\tcallback(null, block) // respond back to the peer\n})\n\nwire.requests     // list of requests we currently have pending {piece, offset, length}\nwire.peerRequests // list of requests the peer currently have pending {piece, offset, length}\n```\n\nYou can set a request timeout if you want to.\n\n```js\nwire.setTimeout(5000) // head request should take a most 5s to finish\n```\n\nIf the timeout is triggered the request callback is called with an error and a `timeout`\nevent is emitted.\n\n### dht and port\n\nYou can set the extensions flag `dht` in the handshake to `true` if you participate in\nthe torrent dht. Afterwards you can send your dht port.\n\n```js\n// send your port to the peer\nwire.port(dhtPort)\nwire.on('port', function (dhtPort) {\n\t// peer has sent a port to us\n})\n```\n\nYou can check to see if the peer supports extensions.\n\n```js\nwire.peerExtensions.dht // supports DHT (bep_0005)\nwire.peerExtensions.extended // supports extended messages (bep_0005)\n```\n\n### keep-alive\n\nYou can enable the keep-alive ping (triggered every 60s).\n\n```js\n// starts the keep alive\nwire.setKeepAlive(true)\nwire.on('keep-alive', function () {\n\t// peer sent a keep alive - just ignore it\n})\n```\n\n### extension protocol (BEP 10)\n\nThis module has built-in support for the\n[BitTorrent Extension Protocol (BEP 10)](http://www.bittorrent.org/beps/bep_0010.html).\n\nThe intention of BEP 10 is to provide a simple and thin transport for extensions to the\nbittorrent protocol. Most extensions to the protocol use BEP 10 so they can add new\nfeatures to the protocol without interfering with the standard bittorrent protocol or\nclients that don't support the new extension.\n\nAn example of a BitTorrent extension that uses BEP 10 is\n[ut_metadata](http://www.bittorrent.org/beps/bep_0009.html) (BEP 9), the extension that\nallows magnet uris to work.\n\n```js\nwire.extended(code, buffer)\n```\n\nThis package, **bittorrent-protocol**, also provides an extension API to make it easy to\nadd extensions to this module using the \"extension protocol\" (BEP 10). For example, to\nsupport ut_metadata (BEP 9), you need only install the\n[ut_metadata](https://github.com/feross/ut_metadata) npm module and call `wire.use()`.\nSee the [Extension API](#extension-api) section for more information.\n\n### transfer stats\n\nCheck how many bytes you have uploaded and download, and current speed\n\n```js\nwire.uploaded // number of bytes uploaded\nwire.downloaded // number of bytes downloaded\n\nwire.uploadSpeed() // upload speed - bytes per second\nwire.downloadSpeed() // download speed - bytes per second\n\nwire.on('download', function (numberOfBytes) {\n  ...\n})\nwire.on('upload', function (numberOfBytes) {\n  ...\n})\n```\n\n\n## extension api\n\nThis package supports a simple extension API so you can extend the default protocol\nfunctionality with common protocol extensions like ut_metadata (magnet uris).\n\nHere are the **bittorrent-protocol** extensions that we know about:\n\n- [ut_metadata](https://github.com/feross/ut_metadata) - Extension for Peers to Send Metadata Files (BEP 9)\n- [ut_pex](https://github.com/fisch0920/ut_pex) - Extension for Peer Discovery (PEX)\n- *Add yours here! Send a pull request!*\n\nIn short, an extension can register itself with at a certain name, which will be added to\nthe extended protocol handshake sent to the remote peer. Extensions can also hook events\nlike 'handshake' and 'extended'. To use an extension, simply require it and call\n`wire.use()`.\n\nHere is an example of the **ut_metadata** extension being used with\n**bittorrent-protocol**:\n\n```js\nvar Protocol = require('bittorrent-protocol')\nvar net = require('net')\nvar ut_metadata = require('ut_metadata')\n\nnet.createServer(function (socket) {\n  var wire = new Protocol()\n  socket.pipe(wire).pipe(socket)\n\n  // initialize the extension\n  wire.use(ut_metadata())\n\n  // all `ut_metadata` functionality can now be accessed at wire.ut_metadata\n\n  // ask the peer to send us metadata\n  wire.ut_metadata.fetch()\n\n  // 'metadata' event will fire when the metadata arrives and is verified to be correct!\n  wire.ut_metadata.on('metadata', function (metadata) {\n    // got metadata!\n\n    // Note: the event will not fire if the peer does not support ut_metadata, if they\n    // don't have metadata yet either, if they repeatedly send invalid data, or if they\n    // simply don't respond.\n  })\n\n  // optionally, listen to the 'warning' event if you want to know that metadata is\n  // probably not going to arrive for one of the above reasons.\n  wire.ut_metadata.on('warning', function (err) {\n    console.log(err.message)\n  })\n\n  // handle handshake\n  wire.on('handshake', function (infoHash, peerId) {\n    wire.handshake(new Buffer('my info hash'), new Buffer('my peer id'))\n  })\n\n}).listen(6881)\n```\n\nIf you want to write your own extension, take a look at the\n[ut_metadata index.js file](https://github.com/feross/ut_metadata/blob/master/index.js)\nto see how it's done.\n\n## license\n\nMIT. Copyright (c) [Feross Aboukhadijeh](http://feross.org).\n\nIncludes code from [peer-wire-protocol](https://github.com/mafintosh/peer-wire-protocol) by mafintosh, which is also MIT.\n",
  "readmeFilename": "README.md",
  "_id": "bittorrent-protocol@1.4.2",
  "_from": "bittorrent-protocol@^1.2.0"
}
