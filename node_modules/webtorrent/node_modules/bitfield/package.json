{
  "name": "bitfield",
  "version": "1.0.2",
  "description": "a very simple bitfield implementation using buffers",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/fb55/bitfield"
  },
  "scripts": {
    "test": "tape tests.js"
  },
  "keywords": [
    "bitfield",
    "buffer"
  ],
  "devDependencies": {
    "tape": "2.12"
  },
  "testling": {
    "files": "tests.js",
    "browsers": [
      "ie/9..latest",
      "chrome/25..latest",
      "firefox/20..latest",
      "safari/6..latest",
      "opera/15.0..latest"
    ]
  },
  "author": {
    "name": "Felix Boehm",
    "email": "me@feedic.com"
  },
  "license": "MIT",
  "readmeFilename": "readme.md",
  "readme": "#bitfield\n\na very simple bitfield, compliant with the Bittorrent spec\n\n    npm install bitfield\n\n[![browser support](https://ci.testling.com/fb55/bitfield.png)](https://ci.testling.com/fb55/bitfield)\n\n####Example\n\n```js\nvar Bitfield = require(\"bitfield\");\n\nvar field = new Bitfield(256); //create a bitfield with 256 bits\n\nfield.set(128); //set the 128th bit\nfield.set(128, true); //same as above\n\nfield.get(128); //true\nfield.get(200); //false (all values are initialised to `false`)\nfield.get(1e3); //false (out-of-bounds is also false)\n\nfield.set(128, false); //set the 128th bit to 0 again\n\nfield.buffer; //the buffer used by bitfield\n```\n\n####Methods\n`Bitfield(data)`: `data` can be either a node.js buffer, WebGL Int8Array or numeric array, or a number representing the maximum number of supported bytes.\n\n`Bitfield#get(index)`: Returns a boolean indicating whether the bit is set.\n\n`Bitfield#set(index[, value])`: `value` defaults to true. Sets the bit to `1` for a value of `true` or `0` for `false`.\n\n##### Auto-grow mode\n`Bitfield(data, { grow: size })`: If you `set` an index that is out-of-bounds, the Bitfield will automatically grow so that the bitfield is big enough to contain the given index, up to the given `size` (in bit). If you want the Bitfield to grow indefinitely, pass `Infinity` as the size.\n\n\n####Properties\n`Bitfield#buffer`: The contents of the bitfield.\n\n`Bitfield#grow`: The passed growth option (defaults to `0`).\n\n##License\n\nMIT\n",
  "bugs": {
    "url": "https://github.com/fb55/bitfield/issues"
  },
  "homepage": "https://github.com/fb55/bitfield",
  "_id": "bitfield@1.0.2",
  "_from": "bitfield@^1.0.2"
}
