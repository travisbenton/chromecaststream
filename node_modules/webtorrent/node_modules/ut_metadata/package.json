{
  "name": "ut_metadata",
  "description": "Extension for Peers to Send Metadata Files (BEP 9)",
  "version": "2.6.0",
  "author": {
    "name": "Feross Aboukhadijeh",
    "email": "feross@feross.org",
    "url": "http://feross.org/"
  },
  "bugs": {
    "url": "https://github.com/feross/ut_metadata/issues"
  },
  "dependencies": {
    "bencode": "^0.6.0",
    "bitfield": "^1.0.1",
    "git-sha1": "^0.1.2",
    "inherits": "^2.0.1"
  },
  "devDependencies": {
    "bittorrent-protocol": "^1.0.0",
    "brfs": "^1.2.0",
    "parse-torrent": "^2.1.2",
    "tape": "^2.14.0"
  },
  "homepage": "http://webtorrent.io",
  "keywords": [
    "torrent",
    "bittorrent",
    "ut_metadata",
    "bep_0009",
    "bep 9",
    "bep",
    "9",
    "Extension for Peers to Send Metadata Files",
    "metadata",
    "p2p"
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/feross/ut_metadata.git"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/10..latest",
      "chrome/25..latest",
      "firefox/20..latest",
      "safari/6..latest",
      "opera/15.0..latest"
    ]
  },
  "readme": "# ut_metadata [![travis](https://img.shields.io/travis/feross/ut_metadata.svg)](https://travis-ci.org/feross/ut_metadata) [![npm](https://img.shields.io/npm/v/ut_metadata.svg)](https://npmjs.org/package/ut_metadata) [![gittip](https://img.shields.io/gittip/feross.svg)](https://www.gittip.com/feross/)\n\n### BitTorrent Extension for Peers to Send Metadata Files (BEP 9)\n\n[![browser support](https://ci.testling.com/feross/ut_metadata.png)](https://ci.testling.com/feross/ut_metadata)\n\nNode.js implementation of the [Extension for Peers to Send Metadata Files (BEP 9)](http://www.bittorrent.org/beps/bep_0009.html). Use with [bittorrent-protocol](https://github.com/feross/bittorrent-protocol).\n\nThe purpose of this extension is to allow clients to join a swarm and complete a download without the need of downloading a .torrent file first. This extension instead allows clients to download the metadata from peers. It makes it possible to support magnet links, a link on a web page only containing enough information to join the swarm (the info hash).\n\nWorks in the browser with [browserify](http://browserify.org/)! This module is used by [WebTorrent](http://webtorrent.io).\n\n### install\n\n```\nnpm install ut_metadata\n```\n\n### usage\n\nThis package should be used with [bittorrent-protocol](https://github.com/feross/bittorrent-protocol), which supports a plugin-like system for extending the protocol with additional functionality.\n\nSay you're already using `bittorrent-protocol`. Your code might look something like this:\n\n```js\nvar Protocol = require('bittorrent-protocol')\nvar net = require('net')\n\nnet.createServer(function (socket) {\n  var wire = new Protocol()\n  socket.pipe(wire).pipe(socket)\n\n  // handle handshake\n  wire.on('handshake', function (infoHash, peerId) {\n    wire.handshake(new Buffer('my info hash'), new Buffer('my peer id'))\n  })\n\n}).listen(6881)\n```\n\nTo add support for BEP 9, simply modify your code like this:\n\n```js\nvar Protocol = require('bittorrent-protocol')\nvar net = require('net')\nvar ut_metadata = require('ut_metadata')\n\nnet.createServer(function (socket) {\n  var wire = new Protocol()\n  socket.pipe(wire).pipe(socket)\n\n  // initialize the extension\n  wire.use(ut_metadata())\n\n  // all `ut_metadata` functionality can now be accessed at wire.ut_metadata\n\n  // ask the peer to send us metadata\n  wire.ut_metadata.fetch()\n\n  // 'metadata' event will fire when the metadata arrives and is verified to be correct!\n  wire.ut_metadata.on('metadata', function (metadata) {\n    // got metadata!\n\n    // Note: the event will not fire if the peer does not support ut_metadata, if they\n    // don't have metadata yet either, if they repeatedly send invalid data, or if they\n    // simply don't respond.\n  })\n\n  // optionally, listen to the 'warning' event if you want to know that metadata is\n  // probably not going to arrive for one of the above reasons.\n  wire.ut_metadata.on('warning', function (err) {\n    console.log(err.message)\n  })\n\n  // handle handshake\n  wire.on('handshake', function (infoHash, peerId) {\n    wire.handshake(new Buffer('my info hash'), new Buffer('my peer id'))\n  })\n\n}).listen(6881)\n```\n\n### api\n\n#### `ut_metadata([metadata])`\n\nInitialize the extension. If you have the torrent metadata (Buffer), pass it into the\n`ut_metadata` constructor so it's made available to the peer.\n\n```js\nvar metadata = fs.readFileSync(__dirname + '/file.torrent')\nwire.use(ut_metadata(metadata))\n```\n\n#### `ut_metadata.fetch()`\n\nAsk the peer to send metadata.\n\n#### `ut_metadata.cancel()`\n\nStop asking the peer to send metadata.\n\n#### `ut_metadata.setMetadata(metadata)`\n\nSet the metadata. If you didn't have the metadata at the time `ut_metadata` was\ninitialized, but you end up getting it from another peer (or somewhere else), you should\ncall `setMetadata` so the metadata will be available to the peer.\n\n#### `ut_metadata.on('metadata', function (metadata) {})`\n\nFired when metadata is available and verified to be correct. Called with a single\nparameter of type Buffer.\n\n```js\nwire.ut_metadata.on('metadata', function (metadata) {\n  console.log(Buffer.isBuffer(metadata)) // true\n})\n```\n\nNote: the event will not fire if the peer does not support ut_metadata, if they\ndon't have metadata yet either, if they repeatedly send invalid data, or if they\nsimply don't respond.\n\n#### `ut_metadata.on('warning', function (err) {})`\n\nFired if:\n - the peer does not support ut_metadata\n - the peer doesn't have metadata yet\n - the peer repeatedly sent invalid data\n\n```js\nwire.ut_metadata.on('warning', function (err) {\n  console.log(err.message)\n})\n```\n\n### license\n\nMIT. Copyright (c) [Feross Aboukhadijeh](http://feross.org).\n",
  "readmeFilename": "README.md",
  "_id": "ut_metadata@2.6.0",
  "_from": "ut_metadata@^2.1.0"
}
