{
  "name": "ut_pex",
  "description": "Extension for Peer Discovery (PEX)",
  "version": "1.0.1",
  "author": {
    "name": "Travis Fischer",
    "email": "fisch0920@gmail.com"
  },
  "dependencies": {
    "bencode": "^0.6.0",
    "compact2string": "^1.2.0",
    "inherits": "^2.0.1",
    "string2compact": "^1.1.1"
  },
  "devDependencies": {
    "bittorrent-protocol": "^1.0.0",
    "brfs": "^1.0.0",
    "parse-torrent": "^1.0.0",
    "tape": "^2.12.0"
  },
  "homepage": "http://webtorrent.io",
  "keywords": [
    "torrent",
    "bittorrent",
    "ut_pex",
    "PEX",
    "extension",
    "Peer Exchange",
    "discovery",
    "p2p"
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/fisch0920/ut_pex.git"
  },
  "bugs": {
    "url": "https://github.com/fisch0920/ut_pex/issues"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/9..latest",
      "chrome/25..latest",
      "firefox/20..latest",
      "safari/6..latest",
      "opera/15.0..latest"
    ]
  },
  "readme": "# ut_pex [![travis](https://img.shields.io/travis/fisch0920/ut_pex.svg)](https://travis-ci.org/fisch0920/ut_pex) [![npm](https://img.shields.io/npm/v/ut_pex.svg)](https://npmjs.org/package/ut_pex)\n\n### BitTorrent Extension for Peer Discovery (PEX)\n\n[![browser support](https://ci.testling.com/fisch0920/ut_pex.png)](https://ci.testling.com/fisch0920/ut_pex)\n\nNode.js implementation of the ut_pex protocol, which is the most popular PEX (peer exchange) protocol used by bittorrent clients.\n\nThe purpose of this extension is to allow peers to exchange known peers directly with each other, thereby facilitating more efficient peer discovery and healthier swarms.  The best description of the (nonstandardized) ut_pex protocol I could find is in section 2.1.4.3 of this [paper](http://www.di.unipi.it/~ricci/XR-EE-LCN_2010_010.pdf).\n\nWorks in the browser with [browserify](http://browserify.org/)! This module is used by [WebTorrent](http://webtorrent.io).\n\n## install\n\n```\nnpm install ut_pex\n```\n\n## usage\n\nThis package should be used with [bittorrent-protocol](https://github.com/feross/bittorrent-protocol), which supports a plugin-like system for extending the protocol with additional functionality.\n\nSay you're already using `bittorrent-protocol`. Your code might look something like this:\n\n```js\nvar Protocol = require('bittorrent-protocol')\nvar net = require('net')\n\nnet.createServer(function (socket) {\n  var wire = new Protocol()\n  socket.pipe(wire).pipe(socket)\n\n  // handle handshake\n  wire.on('handshake', function (infoHash, peerId) {\n    wire.handshake(new Buffer('my info hash'), new Buffer('my peer id'))\n  })\n\n}).listen(6881)\n```\n\nTo add support for PEX, simply modify your code like this:\n\n```js\nvar Protocol = require('bittorrent-protocol')\nvar net = require('net')\nvar ut_pex = require('ut_pex')\n\nnet.createServer(function (socket) {\n  var wire = new Protocol()\n  socket.pipe(wire).pipe(socket)\n\n  // initialize the extension\n  wire.use(ut_pex())\n\n  // all `ut_pex` functionality can now be accessed at wire.ut_pex\n\n  // (optional) start sending peer information to remote peer\n  wire.ut_pex.start()\n\n  // 'peer' event will fire for every new peer sent by the remote peer\n  wire.ut_pex.on('peer', function (peer) {\n    // got a peer\n    // probably add it to peer connections queue\n  })\n\n  // handle handshake\n  wire.on('handshake', function (infoHash, peerId) {\n    wire.handshake(new Buffer('my info hash'), new Buffer('my peer id'))\n  })\n\n}).listen(6881)\n```\n\n## methods\n\n### start\n\nStart sending regular PEX updates to the remote peer. Use `addPeer` and `dropPeer` to control the \ncontent of PEX messages. PEX messages will be sent once every ~65 seconds.\n\n```js\nwire.ut_pex.start()\n```\n\nNote that ut_pex may be used for one-way peer discovery without sending PEX updates to the remote peer, \nbut this use case is discouraged because PEX, like bittorrent is more efficient through altruism.\n\n### stop\n\nStop sending PEX updates to the remote peer.\n\n```js\nwire.ut_pex.stop()\n```\n\n### reset\n\nStops sending updates to the remote peer and resets internal state of peers seen.\n\n```js\nwire.ut_pex.reset()\n```\n\n### addPeer\n\nAdds a peer to the locally discovered peer list to send with the next PEX message.\n\n```js\nwire.ut_pex.addPeer('127.0.0.1:6889')\n```\n\n### dropPeer\n\nAdds a peer to the locally dropped peer list to send with the next PEX message.\n\n```js\nwire.ut_pex.dropPeer('127.0.0.1:6889')\n```\n\n## events\n\n### event: 'peer'\n\nFired for every new peer received from PEX.\n\n```js\nwire.ut_pex.on('peer', function (peer) {\n  var parts = peer.split(':')\n  var ip = parts[0]\n  var port = parts[1]\n  // ...\n})\n```\n\nNote: the event will not fire if the peer does not support ut_pex or if they don't respond.\n\n### event: 'dropped'\n\nFired for every peer dropped from the swarm notified via PEX.\n\n```js\nwire.ut_pex.on('dropped', function (peer) {\n  var parts = peer.split(':')\n  var ip = parts[0]\n  var port = parts[1]\n  // ...\n})\n```\n\nNote: the event will not fire if the peer does not support ut_pex or if they don't respond.\n\n## todo\n(prioritized highest to lowest)\n\n* ~~basic discovery~~\n* ~~basic advertisement~~\n* ~~basic unit tests~~\n* better unit tests\n* peer flag support\n* destroy wire if peer sends PEX messages too frequently\n* ipv6 support\n\n## license\n\nMIT. Copyright (c) Travis Fischer\n",
  "readmeFilename": "README.md",
  "_id": "ut_pex@1.0.1",
  "_from": "ut_pex@^1.0.1"
}
