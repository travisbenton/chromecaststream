{
  "name": "bittorrent-dht",
  "description": "Simple, robust, BitTorrent DHT implementation",
  "version": "0.7.6",
  "author": {
    "name": "Feross Aboukhadijeh",
    "email": "feross@feross.org",
    "url": "http://feross.org/"
  },
  "bugs": {
    "url": "https://github.com/feross/bittorrent-dht/issues"
  },
  "dependencies": {
    "bncode": "^0.5.3",
    "compact2string": "^1.2.0",
    "debug": "^1.0.0",
    "hat": "^0.0.3",
    "inherits": "^2.0.1",
    "portfinder": "^0.2.1"
  },
  "devDependencies": {
    "once": "^1.3.0",
    "tape": "^2.12.3"
  },
  "homepage": "http://webtorrent.io",
  "keywords": [
    "torrent",
    "bittorrent",
    "dht",
    "distributed hash table",
    "protocol",
    "peer",
    "p2p",
    "peer-to-peer"
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/feross/bittorrent-dht.git"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "readme": "# bittorrent-dht [![build](https://img.shields.io/travis/feross/bittorrent-dht.svg)](https://travis-ci.org/feross/bittorrent-dht) [![npm](https://img.shields.io/npm/v/bittorrent-dht.svg)](https://npmjs.org/package/bittorrent-dht) [![npm downloads](https://img.shields.io/npm/dm/bittorrent-dht.svg)](https://npmjs.org/package/bittorrent-dht) [![gittip](https://img.shields.io/gittip/feross.svg)](https://www.gittip.com/feross/)\n\n### Simple, robust, BitTorrent DHT implementation\n\nNode.js implementation of the [BitTorrent DHT protocol](http://www.bittorrent.org/beps/bep_0005.html). BitTorrent DHT is the main peer discovery layer for BitTorrent, which allows for trackerless torrents. DHTs are awesome!\n\nThis module is used by [WebTorrent](https://github.com/feross/WebTorrent). Works in the browser with [browserify](http://browserify.org/) and a `dgram` shim (like [chrome-dgram](https://github.com/feross/chrome-dgram) for chrome apps).\n\n### install\n\n```\nnpm install bittorrent-dht\n```\n\n### example\n\n```\nnpm install magnet-uri\n```\n\n```javascript\nvar DHT    = require('bittorrent-dht');\nvar magnet = require('magnet-uri');\n\nvar uri = \"magnet:?xt=urn:btih:e3811b9539cacff680e418124272177c47477157&dn=Ubuntu+13.10+Desktop+Live+ISO+amd64\";\nvar parsed = magnet(uri);\n\nvar dht = new DHT();\n\ndht.on('peer', function (addr, hash) {\n  console.log('Found peer at ' + addr + '!');\n});\n\ndht.setInfoHash(parsed.infoHash);\n\nvar port = 20000;\ndht.listen(port, function (port) {\n  console.log(\"Now listening on port \" + port);\n});\n\ndht.findPeers();\n```\n\n\n\n### methods\n\n#### `setInfoHash(infoHash)`\n\nAssociate an infoHash with the DHT object. Can be a String or Buffer.\n\n\n#### `dht.listen([port], [callback])`\n\nOpen the socket. If port is undefined, one is picked with [portfinder](https://github.com/indexzero/node-portfinder).\n`callback` is equivalent to `listening` event.\n\n\n#### `findPeers([num])`\n\nGet `num` peers from the DHT. Defaults to unlimited.\n\n\n\n### events\n\n#### 'peer'\n\n    function (addr, infoHash){ ... }\n\nCalled when a peer is found. `addr` is of the form `IP_ADDRESS:PORT`\n\n\n#### 'message'\n\n    function (data, rinfo){ ... }\n\nCalled when a message is received. `rinfo` is an object with properties `address`, `port`\n\n\n#### 'node'\n\n    function (addr){ ... }\n\nCalled when client finds a new DHT node.\n\n#### 'listening'\n\n    function () { ... }\n\n\n#### 'error'\n\n    function (err){ ... }\n\n### license\n\nMIT. Copyright (c) [Feross Aboukhadijeh](http://feross.org).\n",
  "readmeFilename": "README.md",
  "_id": "bittorrent-dht@0.7.6",
  "_from": "bittorrent-dht@^0.7.0"
}
